{"version":3,"sources":["components/Variables.module.css","font.ttf","site.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","gateway","account","contract","totalSupply","web3","tokenPrice","allBurgers","myBurgers","id","a","networkData","chainId","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","window","ethereum","request","method","params","this","loadWeb3","loadBlockchainData","Web3","alert","code","accounts","setState","networkId","ContractNFT","networks","abi","address","eth","Contract","methods","call","retrieveMyTokens","i","tokenByIndex","burger","quant","getNFTPrice","amount","balanceOf","myTokensCount","tokenOfOwnerByIndex","getTotalAmount","totalPrice","mintNFT","send","from","value","once","receipt","burgers","styles","Allstuff","Menu","ContainsLinks","LinkoTw","href","target","rel","LinkoTe","LinkoDi","ContainsInfo","InfoTotalSupply","InfoCurrentSupply","InfoUnitPrice","ContainsBuy","onSubmit","event","preventDefault","mint","className","Button","type","img","Order","Qtt","maxlenght","size","defaultValue","ref","input","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,SAAW,4BAA4B,KAAO,wBAAwB,cAAgB,iCAAiC,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2BAA2B,aAAe,gCAAgC,gBAAkB,mCAAmC,kBAAoB,qCAAqC,cAAgB,iCAAiC,YAAc,+BAA+B,OAAS,0BAA0B,IAAM,uBAAuB,GAAK,wB,+g/CCD1kB,I,yBCAA,MAA0B,iC,OCyBnCC,E,kDAsMJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,uEACTC,QAAS,GACTC,SAAU,KACVC,YAAa,EACbC,KAAM,KACNC,WAAY,EACZC,WAAY,GACZC,UAAU,IAVK,E,qFApMrB,WAAiBC,GAAjB,eAAAC,EAAA,2DAGUD,EAHV,OAKS,MALT,OAqBW,QArBX,OAmCS,KAnCT,6BAMME,EAAc,CACZ,CACEC,QAAS,OACTC,UAAW,0BACXC,QAAS,CAAC,4BACVC,eAAgB,CACdC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEZC,kBAAmB,CAAC,8BAhB9B,mCAsBMR,EAAc,CACZ,CAAEC,QAAS,UACTC,UAAW,iCACXC,QAAS,CAAC,+BACVC,eAAgB,CACdC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEZC,kBAAmB,CAAC,6CA/B9B,mCAoCMR,EAAc,CACZ,CACEC,QAAS,OACTC,UAAW,YACXC,QAAS,CAAC,qCACVC,eAAgB,CACdC,KAAM,eACNC,OAAQ,MACRC,SAAU,IAEZC,kBAAmB,CAAC,kCA9C9B,yFAwDSC,OAAOC,SAASC,QAAQ,CAC7BC,OAAQ,0BACRC,OAAQb,KA1DZ,4C,8HAiEE,sBAAAD,EAAA,sEACQe,KAAKC,WADb,uBAEQD,KAAKE,qBAFb,gD,mHAQF,sBAAAjB,EAAA,sDACQU,OAAOC,SACXD,OAAOf,KAAO,IAAIuB,IAAKR,OAAOC,UAQ5BD,OAAOS,MAAM,gGAVnB,2C,6HAkBE,wCAAAnB,EAAA,+EAIMU,OAAOC,SAASC,QAAQ,CAC5BC,OAAQ,6BACRC,OAAQ,CAAC,CAAEZ,QAAS,cANtB,0DAUyB,OAArB,KAAYkB,KAVhB,2CAYUV,OAAOC,SAASC,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CAAC,CAAEZ,QAAS,UAClBC,UAAW,iCACXC,QAAS,CAAC,4CACVC,eAAgB,CACdC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEZC,kBAAmB,CAAC,+CAtB5B,yEAgCiBC,OAAOC,SAhCxB,UAmCyBD,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAnC3D,eAmCQQ,EAnCR,OAoCEN,KAAKO,SAAS,CAAE9B,QAAS6B,EAAS,KApCpC,UAsC0BX,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,gBAtC5D,WAsCQU,EAtCR,SAuCQtB,EAAcuB,EAAYC,SAASF,IAvC3C,wBAyCUG,EAAMF,EAAYE,IAClBC,EAAU1B,EAAY0B,QACtBlC,EAAW,IAAIiB,OAAOf,KAAKiC,IAAIC,SAASH,EAAKC,GAOnDZ,KAAKO,SAAS,CAAE7B,aAlDpB,UAmD8BA,EAASqC,QAAQpC,cAAcqC,OAnD7D,eAmDUrC,EAnDV,OAqDIqB,KAAKO,SAAS,CAAE5B,gBArDpB,UAsDUqB,KAAKiB,mBAtDf,gCA2DItB,OAAOS,MAAM,oDA3DjB,gE,4HA+DF,gCAAAnB,EAAA,sDACWN,EAAcqB,KAAKzB,MAAMI,YACrBuC,EAAI,EAFnB,YAEsBA,GAAKvC,GAF3B,iCAG6BqB,KAAKzB,MAAMG,SAASyC,aAAaD,EAAI,GAHlE,OAGcE,EAHd,OAIQpB,KAAKO,SAAS,CACZzB,WAAW,GAAD,mBAAMkB,KAAKzB,MAAMO,YAAjB,CAA6BsC,MALjD,OAEwCF,IAFxC,gE,yHAUA,WAAqBG,GAArB,eAAApC,EAAA,sEAEyBe,KAAKzB,MAAMG,SAASqC,QAAQO,YAAYD,GAAOL,OAFxE,cAEUO,EAFV,yBAGSA,GAHT,gD,4HAMA,gCAAAtC,EAAA,sEAE8Be,KAAKzB,MAAMG,SAASqC,QAAQS,UAAUxB,KAAKzB,MAAME,SAASuC,OAFxF,OAEQS,EAFR,OAIWP,EAAE,EAJb,YAIgBA,EAAIO,GAJpB,iCAK6BzB,KAAKzB,MAAMG,SAASqC,QAAQW,oBAAoB1B,KAAKzB,MAAME,QAASyC,GAAGF,OALpG,OAKcI,EALd,OAOQpB,KAAKO,SAAS,CACXxB,UAAU,GAAD,mBAAMiB,KAAKzB,MAAMQ,WAAjB,CAA4BqC,MARhD,OAImCF,IAJnC,gE,+GAeA,WAAcG,GAAd,sBAAApC,EAAA,sEAC6Be,KAAK2B,eAAeN,GADjD,OACUO,EADV,OAEI5B,KAAKzB,MAAMG,SAASqC,QAAQc,QAAQR,GAAOS,KAAK,CAAEC,KAAM/B,KAAKzB,MAAME,QAAQuD,MAAOJ,IAEjFK,KAAK,WAAW,SAACC,GAChB,EAAK3B,SAAS,CACZ4B,QAAQ,GAAD,mBAAM,EAAK5D,MAAM4D,SAAjB,CAA0Bd,SANzC,gD,2EA2BE,WAAU,IAAD,OAEP,OAEE,8BAEI,qBAAKrC,GAAIoD,IAAOC,SAAhB,SACA,sBAAKrD,GAAIoD,IAAOE,KAAhB,UACE,sBAAKtD,GAAIoD,IAAOG,cAAhB,UACE,sBAAKvD,GAAIoD,IAAOI,QAAhB,cAA0B,mBAAGC,KAAK,0BAA0BC,OAAO,SAASC,IAAI,sBAAtD,sBAA1B,OACA,sBAAK3D,GAAIoD,IAAOQ,QAAhB,cAA0B,mBAAGH,KAAK,2BAA2BC,OAAO,SAASC,IAAI,sBAAvD,0BAC1B,sBAAK3D,GAAIoD,IAAOS,QAAhB,cAA0B,mBAAGJ,KAAK,0BAA0BC,OAAO,SAASC,IAAI,sBAAtD,4BAG5B,sBAAK3D,GAAIoD,IAAOU,aAAhB,UACE,qBAAK9D,GAAIoD,IAAOW,gBAAhB,iCACA,qBAAK/D,GAAIoD,IAAOY,kBAAhB,mCACA,qBAAKhE,GAAIoD,IAAOa,cAAhB,sCAGF,qBAAKjE,GAAIoD,IAAOc,YAAhB,SACE,uBAAMC,SAAU,SAACC,GACfA,EAAMC,iBACN,IAAMhC,EAAQ,EAAKD,OAAOY,MAC1B,EAAKsB,KAAKjC,IAHZ,UAKE,uBACEkC,UAAWnB,IAAOoB,OAClBC,KAAK,SACLzB,MAAM,YACN0B,IAAKC,IACP,uBACEJ,UAAWnB,IAAOwB,IAClBH,KAAK,OACLI,UAAU,IACVC,KAAK,IACLC,aAAa,IACbC,IAAK,SAACC,GAAY,EAAK7C,OAAS6C,qB,GA3PhCC,aA4QH7F,ICzRK8F,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aadcaf62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"token\":\"Variables_token__1mEUm\",\"Allstuff\":\"Variables_Allstuff__2gXol\",\"Menu\":\"Variables_Menu__2X-cS\",\"ContainsLinks\":\"Variables_ContainsLinks__3JYQ4\",\"LinkoTw\":\"Variables_LinkoTw__2pt6f\",\"LinkoTe\":\"Variables_LinkoTe__2PUcF\",\"LinkoDi\":\"Variables_LinkoDi__2B0JC\",\"ContainsInfo\":\"Variables_ContainsInfo__1stI1\",\"InfoTotalSupply\":\"Variables_InfoTotalSupply__2z2rN\",\"InfoCurrentSupply\":\"Variables_InfoCurrentSupply__2C7q1\",\"InfoUnitPrice\":\"Variables_InfoUnitPrice__3gh7j\",\"ContainsBuy\":\"Variables_ContainsBuy__3a2vY\",\"Button\":\"Variables_Button__12YkT\",\"Qtt\":\"Variables_Qtt__3K0Ct\",\"bg\":\"Variables_bg__25kCg\"};","export default __webpack_public_path__ + \"static/media/font.17939e70.ttf\";","export default __webpack_public_path__ + \"static/media/site.9d517bf6.png\";","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { ethers } from \"ethers\";\nimport Contract  from 'web3-eth-contract';\nimport '../font.ttf';\n\n\n\n\nimport styles from './Variables.module.css';\n/*import './App.module.css';*/\nimport ContractNFT from '../abis/ContractNFT.json'\nimport Siteo from '../site.png';\nimport Order from '../site.png';\n\n\n/**\n\n * agrega o cambia la red con el chainid que le mandes\n\n * si se le manda el chainid de la red que tiene el usario seleccionada no hace nada\n\n * @param {int} id es el chainid de la blockchain\n\n */\nclass App extends Component {\n\nasync addNetwork(id) {\n\n  let networkData;\n  switch (id) {\n    //polygonmainnet\n    case 137:\n      networkData = [\n        {\n          chainId: \"0x89\",\n          chainName: \"Polygon (Matic) Mainnet\",\n          rpcUrls: [\"https://polygon-rpc.com/\"],\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://polygonscan.com/\"],\n        },\n      ];\n      break;\n    //polygontestnet\n      case 80001:\n      networkData = [\n        { chainId: \"0x13881\",\n          chainName: \"Mumbai Polygon (Matic) Testnet\",\n          rpcUrls: [\"https://rpc.maticvigil.com/\"],\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com/\"],\n        },\n      ];\n      break;\n    case 56:\n      networkData = [\n        {\n          chainId: \"0x38\",\n          chainName: \"BSCMAINET\",\n          rpcUrls: [\"https://bsc-dataseed1.binance.org\"],\n          nativeCurrency: {\n            name: \"BINANCE COIN\",\n            symbol: \"BNB\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\n        },\n      ];\n      break;\n    default:\n      break;\n  }\n\n  // agregar red o cambiar red\n\n  return window.ethereum.request({\n    method: \"wallet_addEthereumChain\",\n    params: networkData,\n  });\n\n}\n\n\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n\n  }\n\n \n \nasync loadWeb3() {\n    if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum)\n      //const provider = new ethers.providers.Web3Provider(window.ethereum)\n      //const signer = provider.getSigner()\n\n\n\n    }    \n    else {\n      window.alert('Please install a wallet on your browser to get burgers. You should consider trying MetaMask!')\n    }\n  }\n  \n\n\n\n\n  async loadBlockchainData() {\n  \n \n    try {\n  await window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0x13881' }],\n  });\n} catch (switchError) {\n  // This error code indicates that the chain has not been added to MetaMask.\n  if (switchError.code === 4902) {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{ chainId: \"0x13881\",\n          chainName: \"Mumbai Polygon (Matic) Testnet\",\n          rpcUrls: [\"https://matic-mumbai.chainstacklabs.com/\"],\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com/\"],\n        }],\n      });\n    } catch (addError) {\n      // handle \"add\" error\n    }\n  }\n  // handle other \"switch\" errors\n}\n    \n    const etaeta = window.ethereum\n    //const web3 = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    // Load account\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    this.setState({ account: accounts[0] })\n\n    const networkId = await window.ethereum.request({ method: 'net_version' })\n    const networkData = ContractNFT.networks[networkId]\n    if(networkData) {\n      const abi = ContractNFT.abi\n      const address = networkData.address\n      const contract = new window.web3.eth.Contract(abi, address)\n      //Contract.setProvider(this.provider);\n      //const contract = new this.web3.eth.Contract(abi, address)\n      //const contract = new ethers.Contract(address, abi, this.provider);\n\n      //const contract = await  window.ethereum.request({method:'eth_getCode', params: [{address:'0xf6781DcA86041cE7236341Dea1149D656A60BC2C'}]})\n      //console.log(contract.toString())\n      this.setState({ contract })\n      const totalSupply = await contract.methods.totalSupply().call()\n\n      this.setState({ totalSupply })\n      await this.retrieveMyTokens();\n\n\n\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n  \nasync retrieveAllTokens (){\n     const totalSupply = this.state.totalSupply;\n      for (var i = 1; i <= totalSupply; i++) {\n        const burger = await this.state.contract.tokenByIndex(i - 1)\n        this.setState({\n          allBurgers: [...this.state.allBurgers, burger]\n        })\n      }\n}\n  \nasync getTotalAmount(quant){\n  //const amount = await this.state.contract.getNFTPrice(quant)\n    const amount = await this.state.contract.methods.getNFTPrice(quant).call()\n  return amount\n  }\n  \nasync retrieveMyTokens(){\n\n  const myTokensCount = await this.state.contract.methods.balanceOf(this.state.account).call()\n  //const myTokensCount = await this.state.contract.balanceOf(this.state.account)\n  for (var i=0; i < myTokensCount; i++){\n        const burger = await this.state.contract.methods.tokenOfOwnerByIndex(this.state.account, i).call()\n        //const burger = await this.state.contract.tokenOfOwnerByIndex(this.state.account, i)\n        this.setState({\n           myBurgers: [...this.state.myBurgers, burger]\n        })\n        \n  }\n\n}\n\nasync  mint  (quant)  { \n    const totalPrice = await this.getTotalAmount(quant)\n    this.state.contract.methods.mintNFT(quant).send({ from: this.state.account,value: totalPrice })\n    //this.state.contract.mintNFT(quant).send({ from: this.state.account,value: totalPrice })\n    .once('receipt', (receipt) => {\n      this.setState({\n        burgers: [...this.state.burgers, quant]\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      gateway: 'https://ipfs.io/ipfs/QmVcpqQ7xsp29HF8UNenCQ7GxrdhUQaqa3rZzMq7yAFiN9/',\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      web3: null,\n      tokenPrice: 0,\n      allBurgers: [],\n      myBurgers:[]\n    }\n  }\n  \n\n\n  render() {\n \n    return (\n      \n      <div>\n       \n          <div id={styles.Allstuff}>\n          <div id={styles.Menu}>\n            <div id={styles.ContainsLinks}>\n              <div id={styles.LinkoTw}> <a href=\"https://www.twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\">TWITTER </a> </div>\n              <div id={styles.LinkoTe}> <a href=\"https://www.telegram.com\" target=\"_blank\" rel=\"noopener noreferrer\">TELEGRAM </a></div>\n              <div id={styles.LinkoDi}> <a href=\"https://www.discord.com\" target=\"_blank\" rel=\"noopener noreferrer\">DISCORD </a></div>\n            </div>\n\n            <div id={styles.ContainsInfo}>\n              <div id={styles.InfoTotalSupply}>............20,020 </div>\n              <div id={styles.InfoCurrentSupply}>............. 19,323 </div>\n              <div id={styles.InfoUnitPrice}>............M$ 14.70 </div>\n            </div>\n\n            <div id={styles.ContainsBuy}>\n              <form onSubmit={(event) => {\n                event.preventDefault();\n                const quant = this.burger.value;\n                this.mint(quant);\n              } }>\n                <input\n                  className={styles.Button}\n                  type='submit'\n                  value='ORDER NOW'\n                  img={Order} />\n                <input\n                  className={styles.Qtt}\n                  type=\"text\"\n                  maxlenght=\"2\"\n                  size=\"2\"\n                  defaultValue=\"1\"\n                  ref={(input) => { this.burger = input; } } />\n              </form>\n\n\n            </div>\n            </div>\n          \n        </div>\n                 \n        </div>\n\n       \n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}