{"version":3,"sources":["components/Variables.module.css","font.ttf","site.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","gateway","account","accweb3","contract","totalSupply","tokenPrice","allBurgers","myBurgers","intTotalSupply","contractAddress","id","a","networkData","chainId","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","window","ethereum","request","method","params","this","loadBlockchainData","code","provider","ethers","providers","Web3Provider","send","signer","getSigner","getAddress","accountEthers","console","log","setState","getNetwork","networkId","ContractBurger","networks","abi","address","Contract","parseInt","retrieveMyTokens","alert","balanceOf","myTokensCount","i","tokenOfOwnerByIndex","burger","tokenByIndex","quant","getNFTPrice","amount","quanto","getTotalAmount","totalPrice","mintBurger","value","on","to","from","location","reload","styles","CryptoBurger","MintingPage","MenuBg","Menu","ContainsLinks","LinkoTw","href","target","rel","LinkoTe","LinkoDi","ContainsInfo","InfoTotalSupply","TSL","TSR","InfoCurrentSupply","InfoUnitPrice","ContainsBuy","onSubmit","event","preventDefault","mint","className","Button","type","img","Order","Qtt","maxlenght","min","max","size","defaultValue","ref","input","MyBurgersPage","MyBurgersBg","MyBurgerHeader","BurgerContent","map","key","style","width","margin","alt","toString","src","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3820986a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CryptoBurger\":\"Variables_CryptoBurger__3BCkC\",\"MintingPage\":\"Variables_MintingPage__1MNx4\",\"MenuBg\":\"Variables_MenuBg__1Kftx\",\"Menu\":\"Variables_Menu__2X-cS\",\"MenuContent\":\"Variables_MenuContent__fX84i\",\"ContainsLinks\":\"Variables_ContainsLinks__3JYQ4\",\"LinkoTw\":\"Variables_LinkoTw__2pt6f\",\"LinkoTe\":\"Variables_LinkoTe__2PUcF\",\"LinkoDi\":\"Variables_LinkoDi__2B0JC\",\"ContainsInfo\":\"Variables_ContainsInfo__1stI1\",\"InfoTotalSupply\":\"Variables_InfoTotalSupply__2z2rN\",\"InfoCurrentSupply\":\"Variables_InfoCurrentSupply__2C7q1\",\"InfoUnitPrice\":\"Variables_InfoUnitPrice__3gh7j\",\"Pinpin\":\"Variables_Pinpin__24PtR\",\"TSL\":\"Variables_TSL__6iN-h\",\"TSR\":\"Variables_TSR__3ZIYJ\",\"ContainsBuy\":\"Variables_ContainsBuy__3a2vY\",\"ContainsBuy_old\":\"Variables_ContainsBuy_old__2j-JD\",\"Button\":\"Variables_Button__12YkT\",\"Qtt\":\"Variables_Qtt__3K0Ct\",\"tnp-subscription\":\"Variables_tnp-subscription__1f-Yq\",\"tnp-submit\":\"Variables_tnp-submit__2KF2u\",\"bg\":\"Variables_bg__25kCg\",\"MyBurgersPage\":\"Variables_MyBurgersPage__xW13W\",\"MyBurgersBg\":\"Variables_MyBurgersBg__1pLYH\",\"MyBurgerHeader\":\"Variables_MyBurgerHeader__2l7RP\",\"BurgerContent\":\"Variables_BurgerContent__r2W7u\"};","export default __webpack_public_path__ + \"static/media/font.17939e70.ttf\";","export default __webpack_public_path__ + \"static/media/site.9d517bf6.png\";","import React, { Component } from 'react';\n//import Web3 from 'web3';\nimport { ethers } from \"ethers\";\n//import Contract  from 'web3-eth-contract';\nimport '../font.ttf';\n\n\n\n\n\n\nimport styles from './Variables.module.css';\nimport ContractBurger from '../abis/ContractBurger.json'\n//import Siteo from '../site.png';\nimport Order from '../site.png';\n\n\n/**\n * adds or changes network\n\n * if chainid sent exists just switches, otherwise it asks to add\n\n * @param {int} id is the chainid of the blockchain\n\n */\nclass App extends Component {\n\nasync addNetwork(id) {\n\n  let networkData;\n  switch (id) {\n    //polygonmainnet\n    case 137:\n      networkData = [\n        {\n          chainId: \"0x89\",\n          chainName: \"Polygon (Matic) Mainnet\",\n          rpcUrls: [\"https://polygon-rpc.com/\"],\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://polygonscan.com/\"],\n        },\n      ];\n      break;\n    //polygontestnet\n      case 80001:\n      networkData = [\n        { chainId: \"0x13881\",\n          chainName: \"Mumbai Polygon (Matic) Testnet\",\n          rpcUrls: [\"https://rpc.maticvigil.com/\"],\n          nativeCurrency: {\n            name: \"MATIC\",\n            symbol: \"MATIC\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com/\"],\n        },\n      ];\n      break;\n    case 43113:\n      networkData = [\n        {\n          chainId: \"0xA869\",\n          chainName: \"Avalanche - Fuji Testnet\",\n          rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n          nativeCurrency: {\n            name: \"AVAX\",\n            symbol: \"AVAX\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://cchain.explorer.avax-test.network/\"],\n        },\n      ];\n      break;\n      case 43114:\n      networkData = [\n        {\n          chainId: \"0xA86A\",\n          chainName: \"Avalanche - Fuji Testnet\",\n          rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n          nativeCurrency: {\n            name: \"AVAX\",\n            symbol: \"AVAX\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://cchain.explorer.avax.network/\"],\n        },\n      ];\n      break;\n    default:\n      break;\n  }\n\n  // agregar red o cambiar red\n\n  return window.ethereum.request({\n    method: \"wallet_addEthereumChain\",\n    params: networkData,\n  });\n\n}\n\n\n\n  async componentWillMount() {\n    //await this.loadWeb3()\n    await this.loadBlockchainData()\n\n  }\n\n  /*\nasync LoadEthers(){\n  if (window.ethereum) {\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n    // Prompt user for account connections\n    \n  }    \n    else {\n      window.alert('Please install a wallet on your browser to get burgers. You should consider trying MetaMask!')\n    }\n}\n \nasync loadWeb3() {\n    if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum)\n    \n    }    \n    else {\n      window.alert('Please install a wallet on your browser to get burgers. You should consider trying MetaMask!')\n    }\n  }\n  \n*/\n\n\n\n  async loadBlockchainData() {  \n \n    try {\n  await window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0xA86A' }],\n  });\n} catch (switchError) {\n  // This error code indicates that the chain has not been added to MetaMask.\n  if (switchError.code === 4902) {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{ chainId: \"0xA86A\",\n          chainName: \"Avalanche Mainnet\",\n          rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n          nativeCurrency: {\n            symbol: \"AVAX\",\n            decimals: 18,\n          },\n          blockExplorerUrls: [\"https://cchain.explorer.avax.network\"],\n        }],\n      });\n    } catch (addError) {\n      // handle \"add\" error\n    }\n  }\n  // handle other \"switch\" errors\n}\n    \n\n\n/*\n   //Keeping web3 until Ethers is usable\n    //const web3 = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    const accountsWeb3 = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    console.log(\"Account web3\", accountsWeb3[0])\n    //this.setState({ accweb3: accountsWeb3[0]})\n\n*/\n\n    // Load account\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    \n    //Retrieving Accounts\n    await provider.send(\"eth_requestAccounts\");\n    const signer =  provider.getSigner();\n    const accountEthers = await signer.getAddress();\n    console.log(\"Account Ethers:\", accountEthers);\n    this.setState({ account: accountEthers})\n\n\n//Retrieving NetworkId\nawait provider.send(\"net_version\", []);\nconst networkId = await provider.getNetwork();\nconsole.log(\"Network: \", (networkId.chainId));\n//this.setState({ account: accounts[0] })\n\n\n   const networkData = ContractBurger.networks[networkId.chainId]\n    /*\n   const abiT = ContractNFT.abi\n   const addressBeforeCheckSum= networkData.address\n\n   console.log(\"Contract Address: \",addressBeforeCheckSum, ethers.utils.getAddress(addressBeforeCheckSum))\n   console.log(\"Wallet web3: \",accountsWeb3[0], ethers.utils.getAddress(accountsWeb3[0]))\n   console.log(\"Wallet Ethers: \",accountEthers, ethers.utils.getAddress(accountEthers))\n\n\n\n   const nftContract = new ethers.Contract(addressBeforeCheckSum, abiT, provider);\n\n   const balanceWeb3   = await nftContract.balanceOf(accountsWeb3[0]);\n   const balanceEthers = await nftContract.balanceOf(accountEthers);\n\n\n   console.log(\"balanceWeb3\",balanceWeb3 )\n\n   console.log(\"balanceEthers\" , balanceEthers)\n\n*/\n    \n\n    \n    //const networkId = await window.ethereum.request({ method: 'net_version' })\n   \n    console.log(\"networkData: \",networkData);\n\n    //const network = provider.getNetwork();\n\n\n    \n\n    if(networkData) {\n      try{\n      const abi = ContractBurger.abi\n      const contractAddress = networkData.address\n      const contract = new  ethers.Contract(contractAddress, abi, signer)\n      //Contract.setProvider(this.provider);\n      //const contract = new this.web3.eth.Contract(abi, address)\n      //const contract = new ethers.Contract(address, abi, this.provider);\n      this.setState({contractAddress})\n      //const contract = await  window.ethereum.request({method:'eth_getCode', params: [{address:'0xf6781DcA86041cE7236341Dea1149D656A60BC2C'}]})\n      //console.log(contract.toString())\n      this.setState({ contract })\n      const totalSupply = await contract.totalSupply()\n      const intTotalSupply = parseInt(totalSupply, 10); // AVALANCHE RETURNS DECIMAL, WHILE MATIC RETURNS HEXA\n      this.setState({ intTotalSupply });\n\n      console.log(this.state.intTotalSupply);\n\n      //ethers.utils.\n      //console.log(\"ethers utils\", ethers.utils.(this.state.account))\n      // const myTokensCount = await this.state.contract.balanceOf(this.state.account)\n      \n     //const nftContract = await ethers.getContractAt(abi, address);\n     \n      await this.retrieveMyTokens();\n\n      }catch (Exception){\n        console.log(Exception)\n      }\n\n\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n  \n  async retrieveMyTokens(){\n\n    const myTokensCount = await this.state.contract.balanceOf(this.state.account)\n    //console.log(\"mytokenscount\",myTokensCount)\n    //const myTokensCount = await this.state.contract.balanceOf(this.state.account)\n    for (var i=0; i < myTokensCount; i++){\n          const burger = await this.state.contract.tokenOfOwnerByIndex(this.state.account, i)\n          //const burger = await this.state.contract.tokenOfOwnerByIndex(this.state.account, i)\n          this.setState({\n             myBurgers: [...this.state.myBurgers, burger]\n          })\n          \n    }\n  \n  }\n\n  \nasync retrieveAllTokens (){\n     const totalSupply = this.state.totalSupply;\n      for (var i = 1; i <= totalSupply; i++) {\n        const burger = await this.state.contract.tokenByIndex(i - 1)\n        this.setState({\n          allBurgers: [...this.state.allBurgers, burger]\n        })\n      }\n}\n  \nasync getTotalAmount(quant){\n  //const amount = await this.state.contract.getNFTPrice(quant)\n    const amount = await this.state.contract.getNFTPrice(quant)\n  return amount\n  }\n\n  \n  \n/*\nfilterMyNewBurgers = {\n    address: this.state.contractAddress,\n    topics: [\n        id(\"mintNFT([myaddress,address,uint256)\"),\n        null,\n        hexZeroPad(this.state.account, 32)\n    ]\n};*/\n\nasync  mint  (quanto)  { \n    const totalPrice = await this.getTotalAmount(quanto)\n    console.log(quanto, totalPrice)\n    this.state.contract.mintBurger(quanto ,{ value: totalPrice })  \n    \n    this.state.contract.on(\"Transfer\", (to, amount, from) => {\n      //console.log(to, amount, from);\n      window.location.reload();\n\n  });\n\n    \n  }\n  \n\n  /*\n  const lala = this.state.contract.once('logs', (receipt) => {\n      console.log(receipt)\n      this.setState({\n        myBurgers: [...this.state.myBurgers, receipt]\n      })\n      window.location.reload();\n    })  */\n\n/*\n  const dataMap = dataSource.reduce((acc, curr) => {\n    const prodArr = acc[curr.product.name];\n    return { ...acc, [curr.product.name]: prodArr ? [...prodArr, curr] : [curr] };\n  }, {});\n*/\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      gateway: 'https://ipfs.io/ipfs/QmQNLs4TUN3xfRM5LDPuhP9KeEkX9cK3XTQ9CFU8NGxEPS/',\n      account: '',\n      accweb3: '',\n      contract: null,\n      totalSupply: 0,\n      tokenPrice: 0,\n      allBurgers: [],\n      myBurgers:[],\n      intTotalSupply: 1,\n      contractAddress:'',\n    }\n  }\n  \n\n\n  render() {\n \n    return (\n      \n\n      \n      \n      <div id={styles.CryptoBurger}>\n          <div id={styles.MintingPage}>\n          <div id={styles.MenuBg}>\n\n            <div id={styles.Menu}>\n                <div id={styles.ContainsLinks}>\n                  <div id={styles.LinkoTw}> <a href=\"https://twitter.com/crptburger\" target=\"_blank\" rel=\"noopener noreferrer\">TWITTER </a> </div>\n                  <div id={styles.LinkoTe}> <a href=\"https://t.me/cryptoburger_official\" target=\"_blank\" rel=\"noopener noreferrer\">TELEGRAM </a></div>\n                  <div id={styles.LinkoDi}> <a href=\"https://cryptoburger.art\" target=\"_blank\" rel=\"noopener noreferrer\">MARKETPLACE </a></div>\n                </div>\n\n                <div id={styles.ContainsInfo}>\n                  <div id={styles.InfoTotalSupply}><div id={styles.TSL}> Total Supply </div><div id={styles.TSR} >20,020</div></div>\n                  <div id={styles.InfoCurrentSupply}><div id={styles.TSL}> Current Supply </div><div id={styles.TSR} > { this.state.intTotalSupply  } </div></div>\n                  <div id={styles.InfoUnitPrice}><div id={styles.TSL}> Burger Price</div><div id={styles.TSR} >AVAX 0.69</div></div>\n                </div>\n\n                <div id={styles.ContainsBuy}>\n                        <form onSubmit={(event) => {\n                                    event.preventDefault();\n                                    const quant = this.burger.value;\n                                    this.mint(quant);\n                                } }>\n                                <span>\n                                    <input\n                                      className={styles.Button}\n                                      type='submit'\n                                      value='ORDER NOW'\n                                      img={Order} />\n                                </span>\n                                <span>\n\n                                    <input\n                                      className={styles.Qtt}\n                                      type=\"number\"\n                                      maxlenght=\"2\"\n                                      min=\"1\"\n                                      max=\"20\"\n                                      size=\"2\"\n                                      defaultValue=\"1\"\n                                      ref={(input) => { this.burger = input; } } />\n                                  </span>\n                          </form>\n                  </div >\n            </div> \n          \n        </div>\n        </div>\n\n              \n        <div id={styles.MyBurgersPage}>\n        <div id={styles.MyBurgersBg}>\n        \n            <div id= {styles.MyBurgerHeader}>\n               <h1>My Burger Collection</h1></div>\n            <p></p>\n            <div id={styles.BurgerContent}>\n            <div className=\"row text-center\">\n            { this.state.myBurgers.map((burger, key) => {\n              return(\n                <div key={key} className=\"col-md-2 mb-1\">\n\t\t<div> <img     \n\t\t         style={{ width: \"100%\", margin: \"5px 0\" }}     \n\t\t         alt={burger.toString()}    \n\t\t         src={this.state.gateway + burger.toString() +'.png'}      \n\t\t       />\n\t\t</div>\n                  <div>{burger.toString()}</div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        </div>\n\n        </div>\n\n    </div>\n\n\n       \n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}